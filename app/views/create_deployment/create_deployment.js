'use strict';angular.module('console.create_deployment', [{        files: [            'views/create_deployment/create_deployment.css'        ]    }])    .controller('createDeploymentCtrl', ['$scope', 'myProject', '$stateParams', 'ImageStream', 'ImageStreamImage','DeploymentConfig','$rootScope','Toast',        function ($scope, myProject, $stateParams, ImageStream, ImageStreamImage,DeploymentConfig,$rootScope,Toast) {            $scope.projectslist = angular.copy(myProject.items);            $scope.imageslist = [];            $scope.tagslist = [];            $scope.checked = {                namespace: '',                image: '',                tag: ''            }            $scope.imageisinput = false;            $scope.tagisinput = false;            $scope.dc = {                "kind": "DeploymentConfig",                "apiVersion": "v1",                "metadata": {                    "name": "",                    "labels": {"app": ""},                    "annotations": {"openshift.io/generated-by": "OpenShiftWebConsole"}                },                "spec": {                    "strategy": {"resources": {}},                    "triggers": [{"type": "ConfigChange"}, {                        "type": "ImageChange",                        "imageChangeParams": {                            "automatic": true,                            "containerNames": [],                            "from": {"kind": "ImageStreamTag", "name": "", "namespace": ""}                        }                    }],                    "replicas": 1,                    "test": false,                    "selector": {"app": "", "deploymentconfig": ""},                    "template": {                        "metadata": {                            "labels": {"deploymentconfig": "", "app": ""},                            "annotations": {"openshift.io/generated-by": "OpenShiftWebConsole"}                        },                        "spec": {                            "volumes": [],                            "containers": [],                            "resources": {}                        }                    }                },                "status": {}            }            $scope.checkednamespace = function (name) {                $scope.checked.namespace = name;                $scope.imageslist = [];                $scope.tagslist = [];                $scope.checked.image = '';                $scope.checked.tag = '';                ImageStream.get({namespace: name}, function (is) {                    $scope.imageslist = is.items                    if (is.items.length === 0) {                        $scope.imageisinput = true;                    }                    console.log('$scope.imageslist', $scope.imageslist);                })            }            $scope.checkedimage = function (image) {                $scope.checked.image = image.metadata.name;                $scope.checked.tag = '';                $scope.tagslist = [];                if (image.status.tags) {                    angular.forEach(image.status.tags, function (tag, i) {                        tag.items[0].name = tag.tag                        $scope.tagslist.push(tag.items[0])                    })                }                //if (image.spec.tags) {                //    $scope.tagslist=image.spec.tags;                //}                //console.log('$scope.tagslist', $scope.tagslist);            }            $scope.checkedtag = function (tag) {                $scope.checked.tag = tag.name;                $scope.detail={}                ImageStreamImage.get({                    namespace: $scope.checked.namespace,                    name: $scope.checked.image + '@' + tag.image                }, function (tag) {                    console.log('tag', tag);                    var port=null                    var xieyi=null                    angular.forEach(tag.image.dockerImageMetadata.Config.ExposedPorts, function (item,i) {                        console.log(i);                        $scope.detail.strport=i                        var arr = i.split('/')                        port= arr[0]                        xieyi= arr[1]                    })                    $scope.detail.creattime=tag.image.metadata.creationTimestamp                    $scope.detail.curl=$scope.checked.image;                    $scope.dc.metadata.name=$scope.checked.image                    $scope.dc.spec.template.spec.containers[0]={                        "image": $scope.checked.image,                        "ports": [],                        "env": [],                        "volumeMounts": []                    }                    if (port) {                        $scope.dc.spec.template.spec.containers[0].ports.push({"containerPort": port, "protocol": xieyi.toUpperCase()})                    }                })            }            $scope.createdc = function () {                $scope.dc.metadata.labels.app = $scope.dc.metadata.name;                $scope.dc.spec.selector = {                    "app": $scope.dc.metadata.name,                    "deploymentconfig":$scope.dc.metadata.name                };                $scope.dc.spec.triggers[1].imageChangeParams.containerNames.push($scope.dc.metadata.name);                $scope.dc.spec.triggers[1].imageChangeParams.from = {                    "kind": "ImageStreamTag",                    "name": $scope.checked.image+':'+$scope.checked.tag,                    "namespace": $scope.checked.namespace                };                $scope.dc.spec.template.metadata.labels={                    "deploymentconfig": $scope.dc.metadata.name,                    "app":$scope.dc.metadata.name                }                $scope.dc.spec.template.spec.containers[0].name=$scope.dc.metadata.name                console.log('$scope.dc',$scope.dc);                DeploymentConfig.create({namespace:$rootScope.namespace},$scope.dc, function (data) {                    console.log('data', data);                    Toast.open('创建成功');                })            }        }    ]);