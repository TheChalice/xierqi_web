'use strict';angular.module('console.stateful-sets-detail', [{    files: [        'views/apps/apps.css',        'views/apps/stateful-sets-detail/stateful-sets-detail.css'    ]}])    .controller('Stateful-setsDetailCtrl', ['$scope','statefuldetail','Metrics','PieChar','$interval','MetricsService',        function($scope,statefuldetail,Metrics,PieChar,$interval,MetricsService) {            var times = (new Date()).getTime()            var netChart = function (activeDate,titleName) {                return {                    options: {                        chart: {                            type: 'areaspline'                        },                        title: {                            text: name,                            align: 'top',                            x: 0,                            style: {                                fontSize: '12px'                            }                        },                        credits: {                            enabled: false                        },                        tooltip: {                            backgroundColor: '#666',                            borderWidth: 0,                            shadow: false,                            style: {                                color: '#fff'                            }                        },                        legend: {                            enabled: false                        }                    },                    series: [{                        name: titleName,                        fillColor: {                            linearGradient: {x1: 0, y1: 1, x2: 0, y2: 0}, //横向渐变效果 如果将x2和y2值交换将会变成纵向渐变效果                            stops: [                                [0, Highcharts.Color('#b3d4fc').setOpacity(0.5).get('rgba')],                                [1, Highcharts.Color('#b3d4fc').setOpacity(0.8).get('rgba')]                            ]                        },                        lineColor: '#fff',                        fillOpacity: 0.6,                        marker: {                            enabled: false                        },                        data: activeDate,                        pointStart: times + 3600 * 1000,                        pointInterval: 15 * 60 * 1000 //时间间隔                    }],                    xAxis: {                        // categories: ['12:00','14:00', '16:00', '18:00', '20:00', '22:00', '24:00'],                        type: 'datetime',                        gridLineWidth: 1                    },                    yAxis: [{                        // gridLineDashStyle: 'ShortDash',                        title: {                            text: titleName+' (KB／s)',                            style: {                                color: '#bec0c7'                            }                        }                    }],                    size: {                        height: 230,                        width: 950                    },                    func: function (chart) {                        //setup some logic for the chart                    }                };            };            // $scope.chartnetConfig = netChart();            statefuldetail.get({ username: $scope.namespace ,name:"etcd"}, function(res) {                console.log('-=-=-=-=-=-=-=-',res);                $scope.statefuldetail = res;            });            var networkobj = {                tags: 'descriptor_name:network/tx_rate|network/rx_rate,type:pod,pod_id:e6384f0b-cf57-11e7-97ab-fa163e095b60',                bucketDuration:"120000ms",                start:"-60mn"            }            var cpuandmemoryobj = {                tags: "descriptor_name:memory/usage|cpu/usage_rate,type:pod_container,pod_id:e6384f0b-cf57-11e7-97ab-fa163e095b60,container_name:etcd",                bucketDuration:"120000ms",                start:"-60mn"            }            var prepareData = function (tp, data) {                var res = [];                MetricsService.normalize(data, tp);                for (var i = 0; i < data.length - 1; i++) {                    res.push(data[i].value);                }                return res;            };            var getcpuandmemory = function(){                PieChar.create(cpuandmemoryobj, function (data) {                    console.log('-=-=-=cpudata',data);                    var cpudata = [];                    var memdata = [];                    $scope.cpuData = [];                    $scope.memData = [];                    angular.forEach(data.gauge, function (item, i) {                        var k = i.split('/')[i.split('/').length - 2];                        if(k == 'cpu'){                            cpudata = item;                            $scope.cpuData = prepareData('CPU', cpudata);                            console.log('$scope.cpuData1111111', $scope.cpuData);                            angular.forEach($scope.cpuData, function (item, i) {                                if (item == null) {                                    $scope.cpuData[i] = 0                                } else {                                    $scope.cpuData[i] = Math.round(item * 10000) / 10000                                }                            })                            console.log('$scope.cpuData22222', $scope.cpuData);                        }else if(k == 'memory'){                            memdata = item                        }                    })                })            }            getcpuandmemory();           var getNetwork = function(){               PieChar.create(networkobj, function (data) {                   var networkrx = [];                   var networktx = [];                   $scope.nettxdata = [];                   $scope.netrxdata = [];                   angular.forEach(data.gauge, function (item, i) {                       var k = i.split('/')[i.split('/').length - 1];                       if(k == 'tx_rate'){                           networkrx = item                       }else if(k == 'rx_rate'){                           networktx = item                       }                   })                   angular.forEach(networkrx, function (input, i) {                       $scope.netrxdata.push(Math.round(input.avg * 100) / 100)                   })                   angular.forEach(networktx, function (input, i) {                       $scope.nettxdata.push(Math.round(input.avg * 100) / 100)                   })                   $scope.TxConfig = netChart($scope.nettxdata,'Network (Sent)');                   $scope.RxConfig = netChart($scope.netrxdata,'Network (Received)');               })           }            getNetwork();            var timer = $interval(function () {                getNetwork()            }, 60000);            $scope.$on("$destroy",                function () {                    $interval.cancel(timer);                }            );        }    ]);