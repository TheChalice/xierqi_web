'use strict';angular.module('console.stateful-sets-detail', [{        files: [            'views/apps/apps.css',            'views/apps/stateful-sets-detail/stateful-sets-detail.css',            'components/deploymentsevent/deploymentsevent.js',            'components/public_metrics/public_metrics.js',        ]    }])    .controller('Stateful-setsDetailCtrl', ['stateful','podList', 'Pod', '$stateParams', '$scope', 'statefuldetail', 'Metrics', 'PieChar', '$interval', 'MetricsService', 'ConversionService',        function (stateful,podList, Pod, $stateParams, $scope, statefuldetail, Metrics, PieChar, $interval, MetricsService, ConversionService) {            $scope.dcName = $stateParams.name;            //console.log('podListpodList',stateful);            $scope.stateful=angular.copy(stateful)            $scope.podlist = angular.copy(podList)            $scope.conname=$scope.stateful.spec.template.spec.containers[0].name;            //$scope.eventfifter='DeploymentConfig';            $scope.times = (new Date()).getTime()            $scope.statefuldetail = $scope.stateful;            var getOwnerReferences = function (apiObject) {                return _.get(apiObject, 'metadata.ownerReferences');            };            var filterForController = function (apiObjects, controller) {                var controllerUID = _.get(controller, 'metadata.uid');                return _.filter(apiObjects, function (apiObject) {                    return _.some(getOwnerReferences(apiObject), {                        uid: controllerUID,                        controller: true                    });                });            }            $scope.statefulPods = filterForController(podList.items, $scope.stateful);            //console.log('$scope.statefulPods-=-=-=', $scope.statefulPods);            var poduid = [];            for (var i = 0; i < $scope.statefulPods.length; i++) {                poduid.push($scope.statefulPods[i].metadata.uid);            }            $scope.poduid = poduid.join('|');            console.log('newpoduid', $scope.poduid);            var netChart = function (title, arr) {                return {                    options: {                        chart: {                            type: 'spline'                        },                        title: {                            text: name,                            align: 'left',                            x: 0,                            style: {                                fontSize: '12px'                            }                        },                        credits: {                            enabled: false                        },                        tooltip: {                            backgroundColor: '#666',                            borderWidth: 0,                            shadow: false,                            style: {                                color: '#fff'                            }                        },                        legend: {                            enabled: true                        }                    },                    series: arr,                    xAxis: {                        // categories: ['12:00','14:00', '16:00', '18:00', '20:00', '22:00', '24:00'],                        type: 'datetime',                        gridLineWidth: 1                    },                    yAxis: [{                        // gridLineDashStyle: 'ShortDash',                        title: {                            text: title,                            style: {                                color: '#bec0c7'                            }                        }                    }],                    size: {                        height: 230,                        width: 950                    },                    func: function (chart) {                        //setup some logic for the chart                    }                };            };            //statefuldetail.get({username: $scope.namespace, name: $scope.dcName}, function (res) {            var networkobj = {                    tags: 'descriptor_name:network/tx_rate|network/rx_rate,type:pod,pod_id:' + $scope.poduid,                    bucketDuration: "120000ms",                    start: "-60mn"                }                var cpuandmemoryobj = {                    tags: "descriptor_name:memory/usage|cpu/usage_rate,type:pod_container,pod_id:" + $scope.poduid + ",container_name:" + $scope.conname,                    bucketDuration: "120000ms",                    start: "-60mn"                }            //});            var getcpuandmemory = function (cpuandmemoryobj) {                PieChar.create(cpuandmemoryobj, function (data) {                    var CPUmetricsList = [];                    var MEMmetricsList = [];                    angular.forEach(data.gauge, function (item, i) {                        var newcpuData = [];                        var newmemData = [];                        var cpudata = [];                        var memdata = [];                        var k = i.split('/')[i.split('/').length - 2];                        var curPodUid = i.split('/')[i.split('/').length - 3];                        var curPodName = '';                        for (var i = 0; i < $scope.statefulPods.length; i++) {                            if ($scope.statefulPods[i].metadata.uid == curPodUid) {                                curPodName = $scope.statefulPods[i].metadata.name;                            }                        }                        if (k == 'cpu') {                            cpudata = item;                            angular.forEach(cpudata, function (input, i) {                                if (!input.empty) {                                    newcpuData.push(Math.floor(input.avg / 1000 * 1000) / 1000);                                } else {                                    newcpuData.push(0);                                }                            })                            var obj = {                                name: curPodName,                                fillColor: {                                    linearGradient: {x1: 0, y1: 1, x2: 0, y2: 0}, //横向渐变效果 如果将x2和y2值交换将会变成纵向渐变效果                                    stops: [                                        [0, Highcharts.Color('#fff').setOpacity(0.8).get('rgba')],                                        [1, '#4ca7de']                                    ]                                },                                // lineColor: '#4d5266',                                fillOpacity: 0.6,                                marker: {                                    enabled: true                                },                                data: newcpuData,                                pointStart: $scope.times + 3600 * 1000,                                pointInterval: 15 * 60 * 1000 //时间间隔                            }                            CPUmetricsList.push(obj);                        } else if (k == 'memory') {                            memdata = item                            angular.forEach(memdata, function (input, i) {                                if (!input.empty) {                                    newmemData.push(Math.floor(input.avg / (1024 * 1024) * 100) / 100);                                } else {                                    newmemData.push(0);                                }                            });                            var obj = {                                name: curPodName,                                fillColor: {                                    linearGradient: {x1: 0, y1: 1, x2: 0, y2: 0}, //横向渐变效果 如果将x2和y2值交换将会变成纵向渐变效果                                    stops: [                                        [0, Highcharts.Color('#fff').setOpacity(0.8).get('rgba')],                                        [1, '#4ca7de']                                    ]                                },                                // lineColor: '#4d5266',                                fillOpacity: 0.6,                                marker: {                                    enabled: true                                },                                data: newmemData,                                pointStart: $scope.times + 3600 * 1000,                                pointInterval: 15 * 60 * 1000 //时间间隔                            }                            MEMmetricsList.push(obj);                        }                    })                    //console.log('CPUmetricsList', CPUmetricsList);                    $scope.CpuConfig = netChart('CPU/cores', CPUmetricsList);                    $scope.MemConfig = netChart('Memory/MiB', MEMmetricsList);                })            }            var getNetwork = function (networkobj) {                PieChar.create(networkobj, function (data) {                    var TXmetricsList = [];                    var RXmetricsList = [];                    angular.forEach(data.gauge, function (item, i) {                        var testobj = {                            name: '',                            fillColor: {                                linearGradient: {x1: 0, y1: 1, x2: 0, y2: 0}, //横向渐变效果 如果将x2和y2值交换将会变成纵向渐变效果                                stops: [                                    [0, Highcharts.Color('#fff').setOpacity(0.8).get('rgba')],                                    [1, '#4ca7de']                                ]                            },                            // lineColor: '#4d5266',                            fillOpacity: 0.6,                            marker: {                                enabled: true                            },                            data: '',                            pointStart: $scope.times + 3600 * 1000,                            pointInterval: 15 * 60 * 1000 //时间间隔                        }                        var networkrx = [];                        var networktx = [];                        var newnettxdata = [];                        var newnetrxdata = [];                        var k = i.split('/')[i.split('/').length - 1];                        var curPodUid = i.split('/')[i.split('/').length - 3];                        var curPodName = '';                        for (var i = 0; i < $scope.statefulPods.length; i++) {                            if ($scope.statefulPods[i].metadata.uid == curPodUid) {                                curPodName = $scope.statefulPods[i].metadata.name;                            }                        }                        if (k == 'tx_rate') {                            networkrx = item;                            angular.forEach(networkrx, function (input, i) {                                if (!input.empty) {                                    newnetrxdata.push(Math.floor(input.avg / 1024 * 1000) / 1000)                                } else {                                    newnetrxdata.push(0)                                }                            })                            testobj.name = curPodName;                            testobj.data = newnetrxdata;                            // var obj ={                            //     name: curPodName,                            //     fillColor: {                            //         linearGradient: {x1: 0, y1: 1, x2: 0, y2: 0}, //横向渐变效果 如果将x2和y2值交换将会变成纵向渐变效果                            //         stops: [                            //             [0, Highcharts.Color('#fff').setOpacity(0.8).get('rgba')],                            //             [1, '#4ca7de']                            //         ]                            //     },                            //     // lineColor: '#4d5266',                            //     fillOpacity: 0.6,                            //     marker: {                            //         enabled: true                            //     },                            //     data:newnetrxdata,                            //     pointStart: $scope.times + 3600 * 1000,                            //     pointInterval: 15 * 60 * 1000 //时间间隔                            // }                            TXmetricsList.push(testobj);                        } else if (k == 'rx_rate') {                            networktx = item;                            angular.forEach(networktx, function (input, i) {                                if (!input.empty) {                                    newnettxdata.push(Math.floor(input.avg / 1024 * 1000) / 1000)                                } else {                                    newnettxdata.push(0)                                }                            })                            // var obj ={                            //     name: curPodName,                            //     fillColor: {                            //         linearGradient: {x1: 0, y1: 1, x2: 0, y2: 0}, //横向渐变效果 如果将x2和y2值交换将会变成纵向渐变效果                            //         stops: [                            //             [0, Highcharts.Color('#fff').setOpacity(0.8).get('rgba')],                            //             [1, '#4ca7de']                            //         ]                            //     },                            //     // lineColor: '#4d5266',                            //     fillOpacity: 0.6,                            //     marker: {                            //         enabled: true                            //     },                            //     data:newnettxdata,                            //     pointStart: $scope.times + 3600 * 1000,                            //     pointInterval: 15 * 60 * 1000 //时间间隔                            // }                            testobj.name = curPodName;                            testobj.data = newnettxdata;                            RXmetricsList.push(testobj);                        }                    })                    $scope.TxConfig = netChart('Network (Sent)KB/s', TXmetricsList);                    $scope.RxConfig = netChart('Network (Received)KB/s', RXmetricsList);                })            }            getNetwork(networkobj);            getcpuandmemory(cpuandmemoryobj);            var timer = $interval(function () {                // getNetwork()            }, 60000);            $scope.$on("$destroy",                function () {                    $interval.cancel(timer);                }            );        }    ]);