'use strict';angular.module('console.create_pipeline', [{        files: [            'views/create_pipeline/create_pipeline.css'        ]    }])    .controller('CreatePiplineCtrl', ['$scope', 'createPipline', 'tempipline', 'processedtemplates', '$rootScope',        function ($scope, createPipline, tempipline, processedtemplates, $rootScope) {            //console.log('createPipline', createPipline);            $scope.pipelinelist = [];            $scope.pipelineMap = {};            $scope.parame = {}            $scope.postpipeline = {}            $scope.labels = [];            angular.forEach(createPipline.items, function (Pipline, i) {                if (Pipline.metadata.annotations && Pipline.metadata.annotations.tags) {                    //console.log(Pipline.metadata.annotations.tags === "instant-app,jenkins");                    if (Pipline.metadata.annotations.tags === "instant-app,jenkins") {                        $scope.pipelinelist.push(Pipline);                    }                }            })            $scope.addLabel = function () {                $scope.labels.push({key: '', value: '', disabled: false})            }            $scope.rmLabel = function (innerIndex) {                $scope.labels.splice(innerIndex, 1);            }            $scope.changepipeline = function (name) {                $scope.pipelineMap = {};                $scope.parame = {}                $scope.tempname = name;                $scope.labels = [];                angular.forEach($scope.pipelinelist, function (pipeline, i) {                    if (pipeline.metadata.name === name) {                        $scope.postpipeline = pipeline                        angular.forEach(pipeline.parameters, function (parame, k) {                            $scope.pipelineMap[parame.name] = {                                displayName: parame.displayName,                                value: parame.value,                                description: parame.description,                                required: parame.required                            }                            $scope.parame[parame.name] = parame.value                        })                        angular.forEach(pipeline.labels, function (labels, k) {                            $scope.labels.push({key: k, value: labels, disabled: true})                        })                    }                })            }            $scope.createPipeline = function () {                console.log('$scope.postpipeline', $scope.postpipeline);                $scope.postpipeline.labels = {};                angular.forEach($scope.labels, function (labels, k) {                    if (labels.key && labels.value) {                        $scope.postpipeline.labels[labels.key] = labels.value;                    }                })                console.log('$scope.postpipeline.labels', $scope.postpipeline.labels);                angular.forEach($scope.pipelineMap, function (value, key) {                    //console.log('value', value.value);                    if (value.value) {                        //$scope.postpipeline.objects                        angular.forEach($scope.postpipeline.objects, function (object, k) {                            var objectstring = JSON.stringify(object)                            //console.log('objectstring', objectstring);                            var FindText = "${" + key + "}"                            //console.log('FindText', FindText);                            var objectarr = objectstring.split(FindText)                            var newobjectstring = objectarr.join(value.value)                            var obj = JSON.parse(newobjectstring)                            //console.log('obj', obj);                            $scope.postpipeline.objects[k] = obj;                            //var newRegExp = new RegExp(FindText,'g')                            //console.log('RegExp', RegExp);                            //objectstring=objectstring.replace(new RegExp('\$\{'+key+'\}','g'),value.value)                            //console.log('newobjectstring', objectstring);                        })                        //console.log($scope.postpipeline);                    }                })                tempipline.get({namespace: 'openshift', name: $scope.postpipeline.metadata.name}, function (temp) {                    //console.log('$scope.postpipeline.labels', $scope.postpipeline.labels);                    //console.log('temp', temp);                    temp.labels = $scope.postpipeline.labels                    temp.objects = $scope.postpipeline.objects                    processedtemplates.create({namespace: $rootScope.namespace}, temp, function (data) {                        console.log('data', data);                    }, function (err) {                        console.log('err', err);                    })                })            }            //console.log('$scope.pipelinelist', $scope.pipelinelist);        }]);